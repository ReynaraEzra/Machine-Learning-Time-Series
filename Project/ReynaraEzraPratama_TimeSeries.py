# -*- coding: utf-8 -*-
"""ReynaraEzraPratama TimeSeries.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jQDldAiAilduDOvvlftZ4FrxXqWD5tLT

# **Machine Learning Time Series Data Using Tensorflow**
## **Reynara Ezra Pratama**
"""

import pandas as pd
import numpy as np
import tensorflow as tf

# Commented out IPython magic to ensure Python compatibility.
!pip install ipython-autotime
# %load_ext autotime

"""# **Get Data**"""

path = '/content/city_temperature.csv'
df = pd.read_csv(path)

"""# **Check Data**"""

df.head()

"""# **Create New Dataframe for Jakarta**"""

df_new = df[df['City'] == 'Jakarta']

df_new.head()

date = df_new[['Year', 'Month', 'Day']]
date.head()

df_new['Date'] = pd.to_datetime(date)

df_new

df_new.set_index('Date')

df_new = df_new.loc[(df_new['Date'] >= '1995-01-01') & (df_new['Date'] < '2020-01-01'), ['Date', 'AvgTemperature']]

df_new = df_new.reset_index()

df_new = df_new.drop('index', axis=1)

df_new

df_new.describe()

df_new['AvgTemperature'].replace(-99, np.nan, inplace=True)

df_new['AvgTemperature'].ffill(inplace=True)

df_new.describe()

df_new.isnull().sum()

"""# **Plot Data**"""

import matplotlib.pyplot as plt

dates = df_new['Date'].values
temp = df_new['AvgTemperature'].values

plt.figure(figsize=(15,6))

plt.plot(dates, temp)
plt.xlabel('Date', fontsize=15)
plt.ylabel('Temperature', fontsize=15)
plt.title('Temperature Average in Jakarta 1995 - 2019', fontsize=20)
plt.show()

final = df_new.set_index('Date')
final.head()

"""# **Split Data**"""

from sklearn.model_selection import train_test_split

train, test = train_test_split(final.values, test_size=0.2, shuffle=False)

"""# **Scale Data**"""

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()

scaled_train = scaler.fit_transform(train)
scaled_test = scaler.fit_transform(test)

length = len(final)

border = int((1-0.2)*length)

date_train = final.index[:border]
date_test = final.index[border:]

from tensorflow.keras.preprocessing.sequence import TimeseriesGenerator

window = 25
train_generator = TimeseriesGenerator(scaled_train, scaled_train, length=window, batch_size=25)
test_generator = TimeseriesGenerator(scaled_test, scaled_test, length=window, batch_size=1)

"""# **Callback**"""

reduce_LR = tf.keras.callbacks.ReduceLROnPlateau(
    monitor="mae",
    factor=0.15,
    patience=5,
    min_lr=2.e-5
)

stop_early = tf.keras.callbacks.EarlyStopping(
    monitor="mae",
    min_delta=0,
    patience=10,
    verbose=0,
    mode="auto",
    baseline=None,
    restore_best_weights=True
)

"""# **Model**"""

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(60, return_sequences=True, input_shape=(window, 1)),
  tf.keras.layers.LSTM(60),
  tf.keras.layers.Dropout(0.3),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(1),
])

model.summary()

"""# **Run Model**"""

optimizer = tf.keras.optimizers.SGD(learning_rate=1.0000e-04, momentum=0.9)
model.compile(loss='Huber',
              optimizer=optimizer,
              metrics=["mae"])

history = model.fit(
    train_generator,
    epochs = 20, 
    callbacks = [reduce_LR, stop_early],
    verbose = 1
)

